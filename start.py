from constants import *
from objects import *
from Function import *
from fsm import *


import asyncio
import random
import time
from threading import Thread
import sqlite3
import aiogram.utils.markdown as fmt
import aiogram.utils.markdown as md
from aiogram import Bot, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()
dp = Bot(token="5095654656:AAGGKQ21-440lk-YNvvtgu2z2wjTAie572Y", parse_mode=types.ParseMode.HTML)
bot = Dispatcher(dp, storage=storage)
thread = Thread(target=run)
thread.start()

@bot.message_handler(commands=['start'])
async def –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ(message: types.Message):
    for i in range(len(ids_users)): 
        if message.from_user.id == ids_users[i]:
            try:
                if get_data(message.from_user.id,'register') == 1:
                    await dp.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç. –Ø - –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã 7-–æ–≥–æ '–ë' –∫–ª–∞—Å—Å–∞.–Ø –±—É–¥—É –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ. –ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–∞–≤–¥–∞üòÅ", reply_markup=kb_menu)
                    await Form_name.name.set()
                    await dp.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ –∏–º—è, –∞ —Ç–æ —à—Ç—Ä–∞—Ñ 150(=')
                    register = 0
                    send_data(message.from_user.id, 'register', register)
                else:
                    await dp.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç)", reply_markup=kb_menu)
            except:
                reg(message.from_user.id)
                
@bot.message_handler(commands=['admin_panel'])
async def –ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å(message: types.Message):
    for i in range(len(ids_admines)): 
        if message.from_user.id == ids_admines[i]:
            await dp.send_message(message.from_user.id,'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
            await dp.send_message(group_id, "@" + message.from_user.username + ": " + "–í–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
            item1_admin_panel = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞", callback_data='admin_btn1')
            item2_admin_panel = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞", callback_data='admin_btn2')
            item3_admin_panel = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞", callback_data='admin_btn3')
            kb_admin_panel = InlineKeyboardMarkup(row_width=2).add(item1_admin_panel, item2_admin_panel, item3_admin_panel)
            await dp.send_message(message.from_user.id,'–í—ã–±–∏—Ä–∞–π', reply_markup=kb_admin_panel)
        else: 
            await dp.send_message(message.from_user.id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°!")
            
#–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('admin_btn'))
async def –ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    if code == 1:
        await Form_name.id.set()
        await dp.send_message(callback_query.from_user.id,'–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    if code == 2:
        pass
    if code == 3:
        pass
    
@bot.message_handler(state=Form_send_mes.id)
async def –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        send_data(message.from_user.id, 'name', remove_char(md.bold(data['name'])))
    await state.finish()
    await dp.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–∫–∏)")

@bot.message_handler(state=Form_name.name)
async def –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        send_data(message.from_user.id, 'name', remove_char(md.bold(data['name'])))
    await state.finish()
    await dp.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–∫–∏)")

@bot.message_handler()
async def –ì–ª–∞–≤–Ω–æ–µ_–º–µ–Ω—é(message):
    #–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    for i in range(len(ids_users)): 
        if message.from_user.id == ids_users[i]:

            if message.text == "–ó–∞—Ä–∞–±–æ—Ç–∞–∫üí∞":
                await dp.send_message(message.from_user.id, '–ï—Å—Ç—å –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞—Ä–æ–±–æ—Ç–∫–∞:)',reply_markup=kb_income)
            
            elif message.text == "–ö–∞–∑–∏–Ω–æü§ë":
                await dp.send_message(message.from_user.id, '–í–æ —á—Ç–æ –∏–≥—Ä–∞—Ç—å –±—É–¥–µ–º?',reply_markup=kb_casino)
            
            elif message.text == "–ö–∞—Ä—Ç–∞üÉè":
                await dp.send_message(message.from_user.id, '–ë–µ—Ç–∫–∞')

            elif message.text == "–®–∫–æ–ª–∞üè´":
                item1 = InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='keyboaord_school1')
                item2 = InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã –Ω–∞ –º—É–∑—ã–∫—É", callback_data='keyboaord_school2')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π —á—Ç–æ –Ω—É–∂–Ω–æ —Ç–µ–±–µ:', reply_markup=markup)

            elif message.text == "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µüôè":
                await dp.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞, –Ω–∞–∂–º–∏ —Å—é–¥–∞ -> https://clck.ru/32WjF3')    

            elif message.text == "–ú–æ–µ –ú–∞–≥–∞–∑–∏–Ωüè™":
                await dp.send_message(message.from_user.id, '–ü—Ä–∞–π—Å –ª–∏—Å—Ç:')

            elif message.text == "–ú–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—èüë∂":
                item1 = InlineKeyboardButton("–ö–∞–∫ –∑–æ–≤—É—Ç?üßê", callback_data='keyboaord2_button1')
                item2 = InlineKeyboardButton("–°–∫–æ–ª–∫—å–æ –¥–µ–Ω–µ–≥?üí∏", callback_data='keyboaord2_button2')
                item3 = InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤?üé´", callback_data='keyboaord2_button3')
                item4 = InlineKeyboardButton("–°–∫–ª—å–∫–æ –∫—Ä–∏–ø—Ç—ã?üíπ", callback_data='keyboaord2_button4')
                item5 = KeyboardButton("–ú–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æüöó", callback_data='keyboaord2_button5')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4, item5)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ(=', reply_markup=markup)

            elif message.text == "–¢–æ–øüòé":
                user = []
                balance = []
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute("""select balance FROM users""")
                moneys = cursor.fetchall()
                moneys.sort(reverse=True)
                conn.commit()
                cursor.close()

                for i in range(3):
                    conn = sqlite3.connect("us.db", check_same_thread=False)
                    cursor = conn.cursor()
                    cursor.execute("""select * FROM users where balance = ?""", moneys[i])
                    data = cursor.fetchall()
                    print(data)
                    for row in data:
                        user.append(row[2])
                        balance.append(row[3])
                    conn.commit()
                    cursor.close()

                await dp.send_message(message.from_user.id,
                fmt.text(
                fmt.text("üíµ–°–∞–º—ã–µ —Å–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ"),
                fmt.text("1 - ",user[0],"(",balance[0],")"),
                fmt.text("2 - ",user[1],"(",balance[1],")"),
                fmt.text("3 - ",user[2],"(",balance[2],")"),
                sep="\n"
                ), parse_mode="HTML"
                )

            elif message.text == "–ó–∞—è–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Éüóé":
                await dp.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ü§î.')
                await Form_moder.moder.set()
            
            elif message.text == "–†–∞–±–æ—Ç—ãüíº":
                item1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data='job_1')
                item2 = types.InlineKeyboardButton("–¢–∞–∫—Å–∏—Å—Ç", callback_data='job_2')
                item3 = types.InlineKeyboardButton("–°–µ—Ç–µ–≤–æ–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data='job_3')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3)
                await dp.send_message(message.from_user.id, '–ö–µ–º –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?', reply_markup=markup)

            elif message.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ãüéÇ":
                await dp.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–æ–∫–æ_–¥–∏–∫')
                await Form_promo.promo.set()

            elif message.text == "–ö—Ä–∏–ø—Ç–æ–ë–∏—Ä–∂–∞üíπ":
                await dp.send_message(message.from_user.id, "–ö—É—Ä—Å:", reply_markup=kb_cripto)
                global LeshaCoin
                global Smeshi–°oin
                global GrafiCoin
                global Blin_ya_ftoroy_coin
                await message.answer(
                fmt.text(
                fmt.text("–õ–µ—à–∞–ö–æ–∏–Ω: ",LeshaCoin),
                fmt.text("–°–º–µ—à–∏–ö–æ–∏–Ω: ",Smeshi–°oin),
                fmt.text("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω: ",GrafiCoin),
                fmt.text("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –∫–æ–∏–Ω: ",Blin_ya_ftoroy_coin),
                sep="\n"
                ), parse_mode="HTML"
                )

            elif message.text == "–ê–≤—Ç–æ–º–∞—Çüé∞":
                await dp.send_message(message.from_user.id, '–°—Ç–∞–≤—å —Å—Ç–∞–≤–∫—É!')
                await Form_cas777.stavka.set()

            elif message.text == "–ö—Ä–∞—àüìà":
                await dp.send_message(message.from_user.id, '–°—Ç–∞–≤—å —Å—Ç–∞–≤–∫—É!')
                #await Form_crash.other.set()
                
            elif message.text == "–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É":
                item1 = types.InlineKeyboardButton("–õ–µ—à–∞–ö–æ–∏–Ω", callback_data='min1')
                item2 = types.InlineKeyboardButton("–°–º–µ—à–∏–ö–æ–∏–Ω", callback_data='min2')
                item3 = types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω", callback_data='min3')
                item4 = types.InlineKeyboardButton("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –ö–æ–∏–Ω", callback_data='min4')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)

            elif message.text == "–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É":
                item1 = types.InlineKeyboardButton("–õ–µ—à–∞–ö–æ–∏–Ω", callback_data='pls1')
                item2 = types.InlineKeyboardButton("–°–º–µ—à–∏–ö–æ–∏–Ω", callback_data='pls2')
                item3 = types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω", callback_data='pls3')
                item4 = types.InlineKeyboardButton("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –ö–æ–∏–Ω", callback_data='pls4')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup)

            elif message.text == "–ú–∞–π–Ω–∏–Ω–≥":
                pass

            elif '–ù–∞—Ö' in message.text or '–Ω–∞—Ö' in message.text:
                await dp.send_message(message.from_user.id, '—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–µ–±—è')
            elif '–ë–∞—Ä–∞–Ω–∏–Ω–∞' in message.text or '–±–∞—Ä–∞–Ω–∏–Ω–∞' in message.text:
                await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
            elif '–®–ª—é—Ö' in message.text or '—à–ª—é—Ö' in message.text:
                await dp.send_message(message.from_user.id, '—á–µ–ª..')
            elif '–¢—É–ø–∞—è' in message.text or '—Ç—É–ø–∞—è' in message.text:
                await dp.send_message(message.from_user.id, '–∂–∞–ª–∫–æ —Ç–µ–±—è')
            elif '–ë–ª—è–¥—å' in message.text or '–±–ª—è–¥—å' in message.text:
                await dp.send_message(message.from_user.id, '–ª–∞–¥–Ω–æ.')
            elif '–ï–±–∞–Ω—É—Ç–∞—è' in message.text or '–µ–±–∞–Ω—É—Ç–∞—è' in message.text:
                await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
            elif '–ú—É–¥–∏–ª–∞' in message.text or '–º—É–¥–∏–ª–∞' in message.text:
                await dp.send_message(message.from_user.id, '–∫—Ç–æ –±—ã –≥–æ–≤–æ—Ä–∏–ª')
            elif '–ü–∏–∑–¥' in message.text or '–ø–∏–∑–¥' in message.text:
                await dp.send_message(message.from_user.id, '—Ç–≤–æ—è')
            elif '–°—É–∫–∞' in message.text or '—Å—É–∫–∞' in message.text:
                await dp.send_message(message.from_user.id, '—Ç—ã.')

            elif '–õ—é–±–ª—é' in message.text or '–ª—é–±–ª—é' in message.text:
                await dp.send_message(message.from_user.id, '–Ø —Ç–µ–±—è —Ç–æ–∂–µ‚ù§')
                if get_data(message.from_user.id, 'love') == 1:
                    await dp.send_message(message.from_user.id, '–î–µ—Ä–∂–∏ –¥–µ–Ω–µ–∂–∫—É')
                    await dp.send_message(message.from_user.id, '(–ø–æ–ª—É—á–µ–Ω–æ 100üíé)')
                    send_data(message.from_user.id, 'love', 0)
                    send_data(message.from_user.id, 'balance', get_data(message.from_user.id, 'balance')+100)

            elif message.text == "–ù–∞–∑–∞–¥":
                await dp.send_message(message.from_user.id, '–û–∫', reply_markup=kb_menu)

            elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
                global working
                working = 0
                await dp.send_message(message.from_user.id, '–û–∫', reply_markup=kb_menu)    

            else:
                await dp.send_message(message.from_user.id, '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –±–æ—Ç–æ–≤–æ–¥—Å–∫–∏–π, —è –Ω–µ –ø–æ–Ω—è–ª–∞üò¢')

#–ê–≤—Ç–æ–º–∞—Ç777
@bot.message_handler(state=Form_cas777.stavka)
async def –ê–≤—Ç–æ–º–∞—Ç777(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        bal = get_data(message.chat.id, 'balance')
        data['other'] = message.text
        if bal >= int(data['other']):
            await dp.send_message(message.chat.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
            choice = random.choices(nums, k=3)
            bal = bal - int(data['other'])
            if choice == ['1', '1', '1']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 1.5
                print('+',bal,'üíé')
            elif choice == ['2', '2', '2']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 2
                print('+',bal,'üíé')
            elif choice == ['3', '3', '3']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 3
                print('+',bal,'üíé')
            elif choice == ['0', '0', '0']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 1
                print('+',bal,'üíé')
            else:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
            await dp.send_message(message.chat.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(bal) + 'üíé')
            send_data(message.chat.id, 'balance', bal)
        else:
            await dp.send_message(message.chat.id, '–ù–µ—Ç—É –¥–µ–Ω—è–≥)=')
    await state.finish()

#–ë–∏–æ–≥—Ä–∞—Ñ–∏—è
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('keyboaord2_button'))
async def –ë–∏–æ–≥—Ä–∞—Ñ–∏—è(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    if code == 1:
        await dp.send_message(callback_query.from_user.id, "–¢–µ–±—è –∑–æ–≤—É—Ç - " + str(get_data(callback_query.from_user.id, 'name')))
    if code == 2:
        await dp.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è " + str(get_data(callback_query.from_user.id, 'balance')) + "üíé")
    if code == 3:
        val = get_data(callback_query.from_user.id,'promo1') + get_data(callback_query.from_user.id,'promo2')
        await dp.send_message(callback_query.from_user.id, "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª " + str(val) + " –ø—Ä–æ–º–æ–∫–æ–¥/–∞/–æ–≤")
    if code == 4:
        await dp.send_message(callback_query.from_user.id, "–í–æ—Ç —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∫—Ä–∏–ø—Ç—ã:")
        await dp.send_message(callback_query.from_user.id,
            fmt.text(
            fmt.text("–õ–µ—à–∞–ö–æ–∏–Ω: ", get_data(callback_query.from_user.id,'lesha–°oin')),
            fmt.text("–°–º–µ—à–∏–ö–æ–∏–Ω: ", get_data(callback_query.from_user.id,'smeshi–°oin')),
            fmt.text("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω: ", get_data(callback_query.from_user.id,'grafiCoin')),
            fmt.text("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –∫–æ–∏–Ω: ", get_data(callback_query.from_user.id,'b_ya_v_Coin')),
            sep="\n"
            ), parse_mode="HTML"
            )
    if code == 5:
        await dp.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–µ –∂–µ –∏–º—É—â–µ—Å—Ç–≤–æ —É —Ç–µ–±—è –µ—Å—Ç—å!',reply_markup=kb_have)

#–®–∫–æ–ª–∞
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('keyboaord_school'))
async def –ë–∏–æ–≥—Ä–∞—Ñ–∏—è(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    if code == 1:
        try:
            await dp.send_message(callback_query.from_user.id, Raspis[datetime.datetime.today().weekday()])
        except:
            await dp.send_message(callback_query.from_user.id, '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!')
    if code == 2:
        pass

#–ó–∞—è–≤–∫–∞ –º–æ–¥–µ—Ä–∞
@bot.message_handler(state=Form_moder.moder)
async def –ó–∞—è–≤–∫–∞_–º–æ–¥–µ—Ä—É(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        await dp.send_message(group_id, "@" + message.from_user.username + ": " + data['text'])
        await dp.send_message(message.from_user.id, '–í—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞üòÅ')
    await state.finish()

#–ü—Ä–æ–º–æ–∫–æ–¥—ã
@bot.message_handler(state=Form_promo.promo)
async def –ü—Ä–æ–º–æ–∫–æ–¥—ã(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global bal
        data['promo'] = message.text

        if data['promo'] == 'eRop1n':
            if get_data(message.from_user.id, 'promo1') == 1:
                await dp.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–π–≥—Ä–∞–ª 100üíé')
                bal = get_data(message.chat.id, 'balance') + 100
                send_data(message.chat.id, 'balance', bal)
                send_data(message.chat.id, 'promo1', 0)
            else:  
                await dp.send_message(message.chat.id, '–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥')  

        elif data['promo'] == 'Suzanne_well_done':
            if get_data(message.from_user.id, 'promo2') == 1 and message.from_user.id != 1143067536:
                await dp.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–π–≥—Ä–∞–ª 150üíé.–ê —Ç–∞–∫–∂–µ —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª –°—é–∑–∞–Ω—É –¥–µ–Ω–µ–∂–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥))')
                bal = get_data(message.chat.id, 'balance') + 150
                bal_s = get_data(1143067536, 'balance') + 150

                send_data(message.chat.id, 'balance', bal)
                send_data(1143067536, 'balance', bal_s)
                send_data(message.chat.id, 'promo2', 0)
            else:
                if message.from_user.id == 1143067536:
                    await dp.send_message(message.chat.id, '–≠—Ç–æ –∂–µ —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞, —Å—Ö–∏—Ç—Ä–∏—Ç—å —Ö–æ—Ç–µ–ª–∞?') 
                else:
                    await dp.send_message(message.chat.id, '–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥')  
        else:
            await dp.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç—Éüò¢')
    await state.finish()

#–ö—Ä–∏–ø—Ç–æ–±–∞—Ä–∂–∞ (–ø–æ–∫—É–ø–∫–∞)
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('min'))
async def –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞_–ø—Ä–æ–¥–∞–∂–∞(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code2 = callback_query.data[-1]
    if code2.isdigit():
        code2 = int(code2)

    bal = get_data(callback_query.from_user.id, 'balance')

    if code2 == 1:
        if bal >= LeshaCoin:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(LeshaCoin)}')
            send_data(callback_query.from_user.id, 'balance', round(bal - LeshaCoin))
            send_data(callback_query.from_user.id, 'lesha–°oin', (get_data(callback_query.from_user.id, 'lesha–°oin')) + 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 2:
        if bal >= Smeshi–°oin:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(Smeshi–°oin)}')
            send_data(callback_query.from_user.id, 'balance', round(bal - Smeshi–°oin))
            send_data(callback_query.from_user.id, 'Smeshi–°oin', (get_data(callback_query.from_user.id, 'Smeshi–°oin')) + 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 3:
        if bal >= GrafiCoin:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(GrafiCoin)}')
            send_data(callback_query.from_user.id, 'balance', round(bal - GrafiCoin))
            send_data(callback_query.from_user.id, 'grafiCoin', (get_data(callback_query.from_user.id, 'grafiCoin')) + 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 4:
        if bal >= Blin_ya_ftoroy_coin:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(Blin_ya_ftoroy_coin)}')
            send_data(callback_query.from_user.id, 'balance', round(bal - Blin_ya_ftoroy_coin))
            send_data(callback_query.from_user.id, 'b_ya_v_Coin', (get_data(callback_query.from_user.id, 'b_ya_v_Coin')) + 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')

#–ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞ (–ø—Ä–æ–¥–∞–∂–∞)
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('pls'))
async def –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞_–∫—É–ø–∏—Ç—å(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code2 = callback_query.data[-1]
    if code2.isdigit():
        code2 = int(code2)

    bal = get_data(callback_query.from_user.id, 'balance')

    if code2 == 1:
        if get_data(callback_query.from_user.id, 'leshaCoin') >= 1:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(LeshaCoin - LeshaCoin*0.1)}')
            send_data(callback_query.from_user.id, 'balance', bal+round(LeshaCoin - LeshaCoin*0.1))
            send_data(callback_query.from_user.id, 'leshaCoin', (get_data(callback_query.from_user.id, 'leshaCoin')) - 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 2:
        if get_data(callback_query.from_user.id, 'Smeshi–°oin') >= 1:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(Smeshi–°oin - Smeshi–°oin*0.1)}')
            send_data(callback_query.from_user.id, 'balance', bal+round(Smeshi–°oin - Smeshi–°oin*0.1))
            send_data(callback_query.from_user.id, 'Smeshi–°oin', (get_data(callback_query.from_user.id, 'Smeshi–°oin')) - 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 3:
        if get_data(callback_query.from_user.id, 'grafiCoin') >= 1:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(GrafiCoin - GrafiCoin*0.1)}')
            send_data(callback_query.from_user.id, 'balance', bal+round(GrafiCoin - GrafiCoin*0.1))
            send_data(callback_query.from_user.id, 'grafiCoin', (get_data(callback_query.from_user.id, 'grafiCoin')) - 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 4:
        if get_data(callback_query.from_user.id, 'b_ya_v_Coin') >= 1:
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(Blin_ya_ftoroy_coin - Blin_ya_ftoroy_coin*0.1)}')
            send_data(callback_query.from_user.id, 'balance', bal+round(Blin_ya_ftoroy_coin - Blin_ya_ftoroy_coin*0.1))
            send_data(callback_query.from_user.id, 'b_ya_v_Coin', (get_data(callback_query.from_user.id, 'b_ya_v_Coin')) - 1)
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')

#–†–∞–±–æ—Ç—ã
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('job_'))
async def –†–∞–±–æ—Ç—ã(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    global situaded
    global answer
    global answers
    global translate_msg
    global right_answer
    global working

    if code == 1:
        working = 1
        answer = 0
        msg1 = await dp.send_message(callback_query.from_user.id, f"–¢—ã –≤—ã–±—Ä–∞–ª —Ä–∞–±–æ—Ç—É - <i>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</i>")
        time.sleep(1)
        msg2 = await dp.send_message(callback_query.from_user.id, "–ï–µ –∑–∞–¥–∞—á–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å –±—ãc—Ç—Ä–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.")
        time.sleep(3)
        msg3 = await dp.send_message(callback_query.from_user.id, "–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞, –≥–æ—Ç–æ–≤—å—Å—è!")
        time.sleep(5)
        await msg1.delete()
        await msg2.delete()
        await msg3.delete()
        await dp.send_message(callback_query.from_user.id, "–ù–∞—á–∏–Ω–∞–µ–º!",reply_markup=kb_stop_work)

        for i in range(10):
            if working == 1:
                answer = 0
                answers+=1
                situaded, correct_word, markup = generate_translate()
                translate_msg = await dp.send_message(callback_query.from_user.id, f"–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{words_english[correct_word]}' ", reply_markup=markup)
                await asyncio.sleep(5)
                if answer == 0 and working == 1:
                    await translate_msg.delete()
                    time_error = await dp.send_message(callback_query.from_user.id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ)=")
                    await asyncio.sleep(1)
                    await time_error.delete()
                    if answers == 10 and working == 1:
                        await dp.send_message(callback_query.from_user.id, f"–í–æ—Ç –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏) –£ —Ç–µ–±—è {right_answer} –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö. –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {right_answer*10}üíé")
    if code == 2:
        pass
    if code == 3:
        pass

@bot.callback_query_handler(lambda c: c.data and c.data.startswith('translate_'))
async def –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫(callback_query: types.CallbackQuery):

    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    global situaded
    global answer
    global answers
    global translate_msg
    global right_answer

    if code == situaded :
        answer = 1
        right_answer+=1
        await translate_msg.delete()
        complete = await dp.send_message(callback_query.from_user.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ(+10üíé)')
        await asyncio.sleep(1)
        await complete.delete() 
        if answers == 10:
            await dp.send_message(callback_query.from_user.id, f"–í–æ—Ç –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏) –£ —Ç–µ–±—è {right_answer} –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö. –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {right_answer*10}üíé")
            send_data(callback_query.from_user.id, 'balance', get_data(callback_query.from_user.id, 'balance') + right_answer*10)
    else:
        answer = 1
        await translate_msg.delete()
        error = await dp.send_message(callback_query.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        await asyncio.sleep(1)
        await error.delete() 
        if answers == 10:
            await dp.send_message(callback_query.from_user.id, f"–í–æ—Ç –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏) –£ —Ç–µ–±—è {right_answer} –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö. –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {right_answer*10}üíé")
            send_data(callback_query.from_user.id, 'balance', get_data(callback_query.from_user.id, 'balance') + right_answer*10)

if __name__ == '__main__':
    executor.start_polling(bot,skip_updates=True)