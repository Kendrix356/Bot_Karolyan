import random
import time
from threading import Thread
import sqlite3
import schedule, time
import aiogram.utils.markdown as fmt
import aiogram.utils.markdown as md
from aiogram import Bot, types
from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import init
storage = MemoryStorage()
dp = Bot(token="5095654656:AAGGKQ21-440lk-YNvvtgu2z2wjTAie572Y", parse_mode=types.ParseMode.HTML)
bot = Dispatcher(dp, storage=storage)

item1 = KeyboardButton("–ö–∞–∑–∏–∫ü§ë")
item2 = KeyboardButton("–°–º–µ—à–Ω—è—Ñ–∫–∞üôÉ")
item3 = KeyboardButton("–†–∞–Ω–¥–æ–ºüé≤")
item4 = KeyboardButton("–ó–∞—è–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Éüóé")
item5 = KeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥—ãüéÇ")
item6 = KeyboardButton("–ö—Ä–∏–ø—Ç–æ–ë–∏—Ä–∂–∞üíπ")
item7 = KeyboardButton("–ú–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—èü§ì")
item8 = KeyboardButton("–õ–µ–≥–µ–Ω–¥—ã")

item1_1 = KeyboardButton("–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É")
item2_1 = KeyboardButton("–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É")
item3_1 = KeyboardButton("–ú–∞–π–Ω–∏–Ω–≥")
item4_1 = KeyboardButton("–ù–∞–∑–∞–¥")

item1_2 = KeyboardButton("–ê–≤—Ç–æ–º–∞—Ç_777")
item2_2 = KeyboardButton("–ö—Ä–∞—à")
item1 = InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å!", callback_data='keyboaordcas_button1')
markup3 = InlineKeyboardMarkup(row_width=2).add(item1)

group_id = -1001708790022
nums = ['0', '0', '0', '0', '1', '1', '1', '2','2', '3']

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.add(item1, item2, item3, item4, item5, item6, item7, item8)
greet_kb1 = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb1.add(item1_1, item2_1, item3_1, item4_1)
greet_kb2 = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb2.add(item1_2, item2_2)

promo1 = 0
promo2 = 0

LeshaKoin = 400
SmeshiKoin = 400
GrafiCoin = 400
Blin_ya_ftoroy_coin = 400

LeshaKoin_im = 0
SmeshiKoin_im = 0
GrafiCoin_im = 0
Blin_ya_ftoroy_coin_im = 0

class Form(StatesGroup):
    name = State() 
class Form1(StatesGroup):
    promo = State()  
class Form2(StatesGroup):
    other = State()  
class Form3(StatesGroup):
    text = State()
class Form4(StatesGroup):
    other = State()

def is_even(number):
    return number % 0.1 == 0
    
def geeks():
    global LeshaKoin
    global SmeshiKoin
    global GrafiCoin
    global Blin_ya_ftoroy_coin
    print("–õ–µ—à–∞–ö–æ–∏–Ω ")
    if random.choice(['+','-']) == '+':
        LeshaKoin = LeshaKoin + random.uniform(0, 10)
        print(LeshaKoin)
    else:
        LeshaKoin = LeshaKoin - random.uniform(0, 10)
        print(LeshaKoin)
    print("–°–º–µ—à–∏–ö–æ–∏–Ω ")
    if random.choice(['+','-']) == '+':
        SmeshiKoin = SmeshiKoin + random.uniform(0, 10)
        print(SmeshiKoin)
    else:
        SmeshiKoin = SmeshiKoin - random.uniform(0, 10)
        print(SmeshiKoin)
    print("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω ")
    if random.choice(['+','-']) == '+':
        GrafiCoin = GrafiCoin + random.uniform(0, 10)
        print(GrafiCoin)
    else:
        GrafiCoin = GrafiCoin - random.uniform(0, 10)
        print(GrafiCoin)
    print("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –ö–æ–∏–Ω ")
    if random.choice(['+','-']) == '+':
        Blin_ya_ftoroy_coin = Blin_ya_ftoroy_coin + random.uniform(0, 10)
        print(Blin_ya_ftoroy_coin)
    else:
        Blin_ya_ftoroy_coin = Blin_ya_ftoroy_coin - random.uniform(0, 10)
        print(Blin_ya_ftoroy_coin)
    print(" ")

def run():
    schedule.every(5).seconds.do(geeks) 
    while True: 
        schedule.run_pending() 
        time.sleep(1)

def remove_char(s):
    result = s[1 : -1]
    return result

thread = Thread(target=run)
thread.start()

@bot.message_handler(commands=['start', 'help'])
async def send_welome(message: types.Message):
    if message.from_user.id == 1278533043 or message.from_user.id == 1089443949 or message.from_user.id == 1728744256 or message.from_user.id == 1316809851 or message.from_user.id == 1121484143 or message.from_user.id == 1814437620 or message.from_user.id == 2047177073 or message.from_user.id == 925209982 or message.from_user.id == 627015995 or message.from_user.id == 1427309639 or message.from_user.id == 1116058402 or message.from_user.id == 1457183761 or message.from_user.id == 1158996363 or message.from_user.id == 1452562218 or message.from_user.id == 1130425276 or message.from_user.id == 1782177637 or message.from_user.id == 1770002348 or message.from_user.id == 901433127 or message.from_user.id == 5151456253 or message.from_user.id == 1521177605 or message.from_user.id == 5005528361 or message.from_user.id == 1143067536 or message.from_user.id == 1330356014:
        conn = sqlite3.connect("us.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO `users` (`user_id`) VALUES (?)", (message.from_user.id,))
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(message.from_user.id,))
        money = cursor.fetchall()
        for row in money:
            global bal
            bal = row[3]
        conn.commit()
        cursor.close() 
        await dp.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç. –Ø - –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã 7-–æ–≥–æ '–ë' –∫–ª–∞—Å—Å–∞.–Ø –±—É–¥—É –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ. –ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–∞–≤–¥–∞üòÅ", reply_markup=greet_kb)
        await Form.name.set()
        await dp.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ –∏–º—è, –∞ –∏–Ω–∞—á–µ –±—É–¥–µ—à—å –∑–∞–±–∞–Ω–µ–Ω(=')
 
@bot.message_handler()
async def button(message):
    if message.from_user.id == 1278533043 or message.from_user.id == 1089443949 or message.from_user.id == 1728744256 or message.from_user.id == 1316809851 or message.from_user.id == 1121484143 or message.from_user.id == 1814437620 or message.from_user.id == 2047177073 or message.from_user.id == 925209982 or message.from_user.id == 627015995 or message.from_user.id == 1427309639 or message.from_user.id == 1116058402 or message.from_user.id == 1457183761 or message.from_user.id == 1158996363 or message.from_user.id == 1452562218 or message.from_user.id == 1130425276 or message.from_user.id == 1782177637 or message.from_user.id == 1770002348 or message.from_user.id == 901433127 or message.from_user.id == 5151456253 or message.from_user.id == 1521177605 or message.from_user.id == 5005528361 or message.from_user.id == 1143067536 or message.from_user.id == 1330356014:
        global bal
        global love
        global real_name_1
        global real_name_2
        global real_name_3
        if message.text == "–ö–∞–∑–∏–∫ü§ë":
            await dp.send_message(message.from_user.id, '–í–æ —á—Ç–æ –∏–≥—Ä–∞—Ç—å –±—É–¥–µ–º!',reply_markup=greet_kb2)
        elif message.text == "–ê–≤—Ç–æ–º–∞—Ç_777":
            await dp.send_message(message.from_user.id, '–°—Ç–∞–≤—å —Å—Ç–∞–≤–∫—É!')
            await Form2.other.set()
        elif message.text == "–ö—Ä–∞—à":
            await dp.send_message(message.from_user.id, '–°—Ç–∞–≤—å —Å—Ç–∞–≤–∫—É!')
            await Form4.other.set()
        elif message.text == "–°–º–µ—à–Ω—è—Ñ–∫–∞üôÉ": 
            st = random.randint(1,13)
            if st == 1:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gliDpFkfMb7I_NBPBltWOD3sUashAACqRMAAo42eUrNKFwnTPiK3CME')
            elif st == 2:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gpiDpFlFfYViahdf65RRUXc5nRZVgACfhUAAu49eEo8CM7yutGMZyME')
            elif st == 3:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gdiDpFbNPcjx-GNmVigpLJr0sW3GgACURAAAiEwWUpGtiSsxBG_5CME')
            elif st == 4:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gViDpFYfO-LcFg7n23hXTjFF-gEYwACdRMAAilKWEqSPTKZ_5JTuSME')
            elif st == 5:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gNiDpFRdY3WSsRuluop1x83qKzHAAOhEwACnXJZSkwrKYXIgtAjIwQ')
            elif st == 6:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9gFiDpFIiilAJu-BT65A_CoRfL20MgAC1hIAAv5bWEpjW-eyoFzlliME')
            elif st == 7:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9f1iDpE6zvlCDA1xxmo7jaJi2c6ybQAC7BQAAvLUUEq3iPJaGRIHIyME')
            elif st == 8:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9ftiDpE1s_r7YnxUjmqaHegNDSHUeQACZxMAAjYzUEqaiY8XOvYZUSME')
            elif st == 9:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9fdiDpEwhpa8vlJ-pfsSS5SC7sEnNgACbxQAAv2zUEpD3fPTiWe-rSME')
            elif st == 10:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9fliDpEzVL9som1Cu3MlVTsQJoOQuAACWBYAAptWUEq4S342u4c8_yME')
            elif st == 11:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9fViDpEuobSPfvIHTfMY3Hs41qVo-gACoBMAAoLtUEoOe30VEyBgDSME')
            elif st == 12:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9fJiDpEnq5qKGbtJQfsn1xg4gcBVyQAC0xUAAuRjUErzDe_SELlzrSME')
            elif st == 13:
                await message.answer_sticker(r'CAACAgIAAxkBAAED9fFiDpEmw2slMszkRoAGB_FHozNOcQAC8RIAAjRQUEqt6w4TTogtZyME')
        elif message.text == "–†–∞–Ω–¥–æ–ºüé≤":
            item1 = InlineKeyboardButton("–ß–∏—Å–ª–æ(0-9)", callback_data='keyboaord1_button1')
            item2 = InlineKeyboardButton("–¶–≤–µ—Çüåà", callback_data='keyboaord1_button2')
            item3 = InlineKeyboardButton("–§—Ä–∞–∑–∞¬Ø\_(„ÉÑ)_/¬Ø", callback_data='keyboaord1_button3')
            markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3)
            await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ(=', reply_markup=markup)
        elif message.text == "–ó–∞—è–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Éüóé":
            await dp.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ü§î.')
            await Form3.text.set()
        elif message.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ãüéÇ":
            await dp.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–æ–∫–æ_–¥–∏–∫')
            await Form1.promo.set()
        elif message.text == "–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É":
            item1_1 = types.InlineKeyboardButton("–õ–µ—à–∞–ö–æ–∏–Ω", callback_data='min1')
            item2_1 = types.InlineKeyboardButton("–°–º–µ—à–∏–ö–æ–∏–Ω", callback_data='min2')
            item3_1 = types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω", callback_data='min3')
            item4_1 = types.InlineKeyboardButton("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –ö–æ–∏–Ω", callback_data='min4')
            markup_1 = InlineKeyboardMarkup(row_width=2).add(item1_1, item2_1, item3_1, item4_1)
            await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup_1)
        elif message.text == "–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É":
            item1_2 = types.InlineKeyboardButton("–õ–µ—à–∞–ö–æ–∏–Ω", callback_data='pls1')
            item2_2 = types.InlineKeyboardButton("–°–º–µ—à–∏–ö–æ–∏–Ω", callback_data='pls2')
            item3_2 = types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω", callback_data='pls3')
            item4_2 = types.InlineKeyboardButton("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –ö–æ–∏–Ω", callback_data='pls4')
            markup_2 = InlineKeyboardMarkup(row_width=2).add(item1_2, item2_2, item3_2, item4_2)
            await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π:', reply_markup=markup_2)
        elif message.text == "–ú–∞–π–Ω–∏–Ω–≥":
            pass
        elif message.text == "–ù–∞–∑–∞–¥":
            await dp.send_message(message.from_user.id, '–û–∫',reply_markup=greet_kb)
        elif '–ù–∞—Ö' in message.text or '–Ω–∞—Ö' in message.text:
            await dp.send_message(message.from_user.id, '—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–µ–±—è')
        elif '–ë–∞—Ä–∞–Ω–∏–Ω–∞' in message.text or '–±–∞—Ä–∞–Ω–∏–Ω–∞' in message.text:
            await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
        elif '–®–ª—é—Ö–∞' in message.text or '—à–ª—é—Ö–∞' in message.text:
            await dp.send_message(message.from_user.id, '—á–µ–ª..')
        elif '–¢—É–ø–∞—è' in message.text or '—Ç—É–ø–∞—è' in message.text:
            await dp.send_message(message.from_user.id, '–∂–∞–ª–∫–æ —Ç–µ–±—è')
        elif '–ë–ª—è–¥—å' in message.text or '–±–ª—è–¥—å' in message.text:
            await dp.send_message(message.from_user.id, '–ª–∞–¥–Ω–æ.')
        elif '–ï–±–∞–Ω—É—Ç–∞—è' in message.text or '–µ–±–∞–Ω—É—Ç–∞—è' in message.text:
            await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
        elif '–ú—É–¥–∏–ª–∞' in message.text or '–º—É–¥–∏–ª–∞' in message.text:
            await dp.send_message(message.from_user.id, '–∫—Ç–æ –±—ã –≥–æ–≤–æ—Ä–∏–ª')
        elif '–ü–∏–∑–¥' in message.text or '–ø–∏–∑–¥' in message.text:
            await dp.send_message(message.from_user.id, '—Ç–≤–æ—è')
        elif '–°—É–∫–∞' in message.text or '—Å—É–∫–∞' in message.text:
            await dp.send_message(message.from_user.id, '—Ç—ã.')
        elif '–õ—é–±–ª—é' in message.text or '–ª—é–±–ª—é' in message.text:
            await dp.send_message(message.from_user.id, '–Ø —Ç–µ–±—è —Ç–æ–∂–µ‚ù§')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            users = cursor.execute("SELECT * FROM `users`")
            print(users.fetchall())
            er = """select * FROM users where user_id = ?"""
            cursor.execute(er,(message.from_user.id,))
            loves = cursor.fetchall()
            for row in loves:
                love = row[4]
            conn.commit()
            cursor.close()
            if love == 1:
                love = 0
                bal += 100
                await dp.send_message(message.from_user.id, '–î–µ—Ä–∂–∏ –¥–µ–Ω–µ–∂–∫—É')
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                sql_update_query = """Update users set love = ? where user_id = ?"""
                sql_update_query1 = """Update users set money = ? where user_id = ?"""
                data = (love, message.from_user.id,)
                data1 = (bal, message.from_user.id,)
                cursor.execute(sql_update_query, data)
                cursor.execute(sql_update_query1, data1)
                conn.commit()
                cursor.close()
                await dp.send_message(message.from_user.id, '(–ø–æ–ª—É—á–µ–Ω–æ 100üíé)')
        elif message.text == "–ö—Ä–∏–ø—Ç–æ–ë–∏—Ä–∂–∞üíπ":
            await dp.send_message(message.from_user.id, "–ö—É—Ä—Å:", reply_markup=greet_kb1)
            global LeshaKoin
            global SmeshiKoin
            global GrafiCoin
            global Blin_ya_ftoroy_coin
            await message.answer(
            fmt.text(
            fmt.text("–õ–µ—à–∞–ö–æ–∏–Ω: ",LeshaKoin),
            fmt.text("–°–º–µ—à–∏–ö–æ–∏–Ω: ",SmeshiKoin),
            fmt.text("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω: ",GrafiCoin),
            fmt.text("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –∫–æ–∏–Ω: ",Blin_ya_ftoroy_coin),
            sep="\n"
            ), parse_mode="HTML"
            )
        elif message.text == "–ú–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—èü§ì":
            item1 = InlineKeyboardButton("–ö–∞–∫ –∑–æ–≤—É—Ç?üßê", callback_data='keyboaord2_button1')
            item2 = InlineKeyboardButton("–°–∫–æ–ª–∫—å–æ –¥–µ–Ω–µ–≥?üí∏", callback_data='keyboaord2_button2')
            item3 = InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤?üé´", callback_data='keyboaord2_button3')
            item4 = InlineKeyboardButton("–°–∫–ª—å–∫–æ –∫—Ä–∏–ø—Ç—ã?üíπ", callback_data='keyboaord2_button4')
            markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4)
            await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ(=', reply_markup=markup)
        elif message.text == "–õ–µ–≥–µ–Ω–¥—ã":
            money = 0
            num = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            for i in range(1, 35):
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                er = """select * FROM users where id = ?"""
                cursor.execute(er,(i,))
                data = cursor.fetchall()
                for row in data:
                    num[i] = row[3]
                conn.commit()
                cursor.close()
            num.sort(reverse=True)
            print(num)
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            er = """select * FROM users where money = ?"""
            cursor.execute(er,(num[0],))
            data = cursor.fetchall()
            for row in data:
                real_name_1 = row[2]
            cursor.execute(er,(num[1],))
            data = cursor.fetchall()
            for row in data:
                real_name_2 = row[2]
            cursor.execute(er,(num[2],))
            data = cursor.fetchall()
            for row in data:
                real_name_3 = row[2]
            conn.commit()
            cursor.close()
            await dp.send_message(message.from_user.id,
            fmt.text(
            fmt.text("üíµ–°–∞–º—ã–µ —Å–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ"),
            fmt.text("1 - ",real_name_1,"(",num[0],")"),
            fmt.text("2 - ",real_name_2,"(",num[1],")"),
            fmt.text("3 - ",real_name_3,"(",num[2],")"),
            sep="\n"
            ), parse_mode="HTML"
            )
        else:
            await dp.send_message(message.from_user.id, '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –±–æ—Ç–æ–≤–æ–¥—Å–∫–∏–π, —è –Ω–µ –ø–æ–Ω—è–ª–∞üò¢')

@bot.callback_query_handler(lambda c: c.data and c.data.startswith('keyboaord1_button'))
async def process_callbacks_button(callback_query: types.CallbackQuery):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 1:
        await dp.answer_callback_query(callback_query.id)
        n = random.randint(0,9)
        await dp.send_message(callback_query.from_user.id, str(n))
    if code == 2:
        await dp.answer_callback_query(callback_query.id)
        n = random.randint(1,6)
        if n == 1:
            await dp.send_message(callback_query.from_user.id, '–ö—Ä–∞—Å–Ω—ã–π‚ù§')
        elif n == 2:
            await dp.send_message(callback_query.from_user.id, '–û—Ä–∞–Ω–∂–µ–≤—ã–πüß°')
        elif n == 3:
            await dp.send_message(callback_query.from_user.id, '–ñ–µ–ª—Ç—ã–πüíõ')
        elif n == 4:
            await dp.send_message(callback_query.from_user.id, '–ó–µ–ª–µ–Ω—ã–πüíö')
        elif n == 5:
            await dp.send_message(callback_query.from_user.id, '–°–∏–Ω–∏–πüíô')
        elif n == 6:
            await dp.send_message(callback_query.from_user.id, '–§–∏–æ–ª–µ—Ç–æ–≤—ã–πüíú')
            await dp.send_message(callback_query.from_user.id, str(n))
    if code == 3:
        await dp.answer_callback_query(callback_query.id)
        n = random.randint(1,20)
        if n == 1:
            await dp.send_message(callback_query.from_user.id, '–Ø –≤—Å—ë –æ—Ç–¥–∞–º, –Ω–æ –≥–¥–µ –º–Ω–µ —ç—Ç–æ –≤–∑—è—Ç—å?')
        elif n == 2:
            await dp.send_message(callback_query.from_user.id, '–ú–æ—è –∫–∏—Å–∫–∞ —É–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ —Å—Å–∞–ª–∫–∏.')
        elif n == 3:
            await dp.send_message(callback_query.from_user.id, '–ß—Ç–æ —Ç–µ–±–µ –º–µ—à–∞–µ—Ç –ø–æ–Ω—è—Ç—å —ç—Ç–æ? –õ–∏—à–Ω–∏–µ —Ö—Ä–æ–º–æ—Å–æ–º—ã?')
        elif n == 4:
            await dp.send_message(callback_query.from_user.id, '–î–∞ –Ω–∏—á–µ–≥–æ, –Ω–∏—á–µ–≥–æ, —è –Ω–∞ —Ç–µ–±—è –Ω–µ –æ–±–∏–∂–∞—é—Å—å. –£ –º–µ–Ω—è —Å–æ—Å–µ–¥ —Ç–æ–∂–µ –¥–µ–±–∏–ª‚Ä¶')
        elif n == 5:
            await dp.send_message(callback_query.from_user.id, '–î–µ–≤—É—à–∫–∞, –∫–∞–ø–ª—è –Ω–∏–∫–æ—Ç–∏–Ω–∞ —É–±–∏–≤–∞–µ—Ç –∏ –Ω–µ —Ç–∞–∫—É—é –ª–æ—à–∞–¥—å.')
        elif n == 6:
            await dp.send_message(callback_query.from_user.id, '–ü–æ –º–æ—Ä–¥–µ –ø–æ–ª—É—á–∏–ª–∏? –†–∞—Å–ø–∏—à–∏—Ç–µ—Å—å.')
        elif n == 7:
            await dp.send_message(callback_query.from_user.id, '–õ—é–±–∏—à—å –∫–∞—Ç–∞—Ç—å—Å—è ‚Äî –∫–∞—Ç–∏—Å—å –∫ —á–µ—Ä—Ç–æ–≤–æ–π –º–∞—Ç–µ—Ä–∏')
        elif n == 8:
            await dp.send_message(callback_query.from_user.id, '–î—É—Ä–∞–∫–∏ ‚Äî –Ω–µ –º–∞–º–æ–Ω—Ç—ã, —Å–∞–º–∏ –Ω–µ –≤—ã–º—Ä—É—Ç')
        elif n == 9:
            await dp.send_message(callback_query.from_user.id, '–ú–∞—à—É –ø–∞–ª—å—Ü–µ–º –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏—à—å')
        elif n == 10:
            await dp.send_message(callback_query.from_user.id, '–ë–µ—Ä–µ–≥–∏ —Ä–æ–¥–∏–Ω—É ‚Äî –æ—Ç–¥—ã—Ö–∞–π –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π.')
        elif n == 11:
            await dp.send_message(callback_query.from_user.id, '–û–¥–∏–Ω –≤ –ø–æ–ª–µ ‚Äî –∞ –≤–æ–Ω–∏‚Ä¶')
        elif n == 12:
            await dp.send_message(callback_query.from_user.id, '–í –∑–¥–æ—Ä–æ–≤–æ–º —Ç–µ–ª–µ ‚Äî –∑–¥–æ—Ä–æ–≤—ã–π —Å—Ç—É–ª')
        elif n == 13:
            await dp.send_message(callback_query.from_user.id, '–ó–æ–ª–æ—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–µ–≤—É—à–∫–∏: –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å ‚Äî —É–ª—ã–±–Ω–∏—Å—å –∏ –ø–æ–ø—Ä–∞–≤—å –ª–∏—Ñ—á–∏–∫.')
        elif n == 14:
            await dp.send_message(callback_query.from_user.id, '–õ—É—á—à–µ –ø–µ—Ä–µ—Å–ø–∞—Ç—å, —á–µ–º –Ω–µ–¥–æ–µ—Å—Ç—å.')
        elif n == 15:
            await dp.send_message(callback_query.from_user.id, '–õ—É—á—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å ‚Äî —á–µ–º —Å—Ç–æ —Ä–∞–∑ —É–≤–∏–¥–µ—Ç—å.')
        elif n == 16:
            await dp.send_message(callback_query.from_user.id, '–ë–ê–† ‚Äî –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ê–ª–∫–æ–≥–æ–ª—å–Ω–æ–≥–æ –†–∞—Ä–∏—Ç–µ—Ç–∞.')
        elif n == 17:
            await dp.send_message(callback_query.from_user.id, '–í –∫–∞–∂–¥—É—é –ø–æ–≥–æ–¥—É –±–ª–∞–≥–æ –¥–∞—Ç—å.')
        elif n == 18:
            await dp.send_message(callback_query.from_user.id, '–û–ø—Ç–∏–º–∏—Å—Ç—ã –∏–∑–æ–±—Ä–µ—Ç–∞—é—Ç —Å–∞–º–æ–ª–µ—Ç—ã, –∞ –ø–µ—Å—Å–∏–º–∏—Å—Ç—ã ‚Äì –ø–∞—Ä–∞—à—é—Ç—ã.')
        elif n == 19:
            await dp.send_message(callback_query.from_user.id, '–î–µ–≤—É—à–∫–∞, –¥–∞–≤–∞–π—Ç–µ —Å–∫—Ä–µ–ø–∏–º –Ω–∞—à—É –¥—Ä—É–∂–±—É –ø–æ–ª–æ–≤—ã–º –∞–∫—Ç–æ–º.')
        else:
            await dp.send_message(callback_query.from_user.id, '–õ—é–±–ª—é —Ç–µ–±—è))')

@bot.callback_query_handler(lambda c: c.data and c.data.startswith('keyboaord2_button'))
async def process_callback_button(callback_query: types.CallbackQuery):
    global promo1
    global promo2
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 1:
        conn = sqlite3.connect("us.db", check_same_thread=False)
        cursor = conn.cursor()
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(callback_query.from_user.id,))
        real_name = cursor.fetchall()
        for row in real_name:
            real_name = row[2]
        conn.commit()
        cursor.close()
        await dp.send_message(callback_query.from_user.id, "–¢–µ–±—è –∑–æ–≤—É—Ç - " + str(real_name))
    if code == 2:
        conn = sqlite3.connect("us.db", check_same_thread=False)
        cursor = conn.cursor()
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(callback_query.from_user.id,))
        money = cursor.fetchall()
        for row in money:
            money = row[3]
        conn.commit()
        cursor.close()
        await dp.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è " + str(money) + "üíé")
    if code == 3:
        val = 0
        conn = sqlite3.connect("us.db", check_same_thread=False) 
        cursor = conn.cursor()
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(callback_query.from_user.id,))
        base = cursor.fetchall()
        for row in base:
            promo1 = row[6]
            promo2 = row[7]
        conn.commit()
        cursor.close()
        if promo1 == 0:
            val=val+1
        if promo2 == 0:
            val=val+1
        await dp.send_message(callback_query.from_user.id, "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª " + str(val) + " –ø—Ä–æ–º–æ–∫–æ–¥/–∞/–æ–≤")
    if code == 4:
        global bal
        global LeshaKoin_im
        global SmeshiKoin_im
        global GrafiCoin_im
        global Blin_ya_ftoroy_coin_im
        conn = sqlite3.connect("us.db", check_same_thread=False) 
        cursor = conn.cursor()
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(callback_query.from_user.id,))
        base = cursor.fetchall()
        for row in base:
            bal = row[3]
            LeshaKoin_im = row[8]
            SmeshiKoin_im = row[9]
            GrafiCoin_im = row[10]
            Blin_ya_ftoroy_coin_im = row[11]
        conn.commit()
        cursor.close()
        await dp.send_message(callback_query.from_user.id, "–í–æ—Ç —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –∫—Ä–∏–ø—Ç—ã:")
        await dp.send_message(callback_query.from_user.id,
            fmt.text(
            fmt.text("–õ–µ—à–∞–ö–æ–∏–Ω: ",LeshaKoin_im),
            fmt.text("–°–º–µ—à–∏–ö–æ–∏–Ω: ",SmeshiKoin_im),
            fmt.text("–ì—Ä–∞—Ñ–∏–ö–æ–∏–Ω: ",GrafiCoin_im),
            fmt.text("–ë–ª–∏–Ω —è –≤—Ç–æ—Ä–æ–π –∫–æ–∏–Ω: ",Blin_ya_ftoroy_coin_im),
            sep="\n"
            ), parse_mode="HTML"
            )
@bot.callback_query_handler(lambda c: c.data and c.data.startswith('keyboaordcas_button'))
async def process_callback_button_3(callback_query: types.CallbackQuery, x_now, bal):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 1:
        await dp.send_message(callback_query.from_user.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–π–≥—Ä–∞–ª{x_now}")
@bot.message_handler(state=Form.name)
async def process_gender1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        conn = sqlite3.connect("us.db", check_same_thread=False)
        cursor = conn.cursor()
        sql_update_query = """Update users set real_name = ? where user_id = ?"""
        data = (remove_char(md.bold(data['name'])), message.from_user.id,)
        cursor.execute(sql_update_query, data)
        conn.commit()
        cursor.close()
    await state.finish()
    await dp.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–∫–∏)")

@bot.message_handler(state=Form1.promo)
async def get1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global promo_1
        global promo_2
        global bal_s
        data['promo'] = message.text
        global bal
        conn = sqlite3.connect("us.db", check_same_thread=False)
        cursor = conn.cursor()
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(message.from_user.id,))
        promo1 = cursor.fetchall()
        for row in promo1:
            bal = row[3]
            promo_1 = row[6]
            promo_2 = row[7]
        conn.commit()
        cursor.close()
        if data['promo'] == 'eRop1n':
            if promo_1 == 1:
                await dp.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–π–≥—Ä–∞–ª 100üíé')
                bal += 100
                promo_1 = 0
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                sql_update_query = """Update users set promo1 = ? where user_id = ?"""
                sql_update_query1 = """Update users set money = ? where user_id = ?"""
                data1 = (bal, message.from_user.id,)
                data = (promo_1, message.from_user.id,)
                cursor.execute(sql_update_query1, data1)
                cursor.execute(sql_update_query, data)
                conn.commit()
                cursor.close()
            elif promo_1 == 0:  
                await dp.send_message(message.chat.id, '–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥')  
        elif data['promo'] == 'Suzanne_well_done':
            if promo_2 == 1:
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                users = cursor.execute("SELECT * FROM `users`")
                print(users.fetchall())
                er = """select * FROM users where user_id = ?"""
                cursor.execute(er,(1427309639,))
                data3 = cursor.fetchall()
                for row in data3:
                    bal_s = row[3]
                conn.commit()
                cursor.close()
                await dp.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–π–≥—Ä–∞–ª 150üíé.–ê —Ç–∞–∫–∂–µ —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª –°—é–∑–∞–Ω—É –¥–µ–Ω–µ–∂–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥))')
                bal += 150
                promo_2 = 0
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                sql_update_query = """Update users set promo2 = ? where user_id = ?"""
                sql_update_query1 = """Update users set money = ? where user_id = ?"""
                data2 = (bal_s+150, 1427309639,)
                data1 = (bal, message.from_user.id,)
                data = (promo_2, message.from_user.id,)
                cursor.execute(sql_update_query1, data2)
                cursor.execute(sql_update_query1, data1)
                cursor.execute(sql_update_query, data)
                conn.commit()
                cursor.close()
            else:
                await dp.send_message(message.chat.id, '–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥')  
        else:
            await dp.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç—Éüò¢')
    await state.finish()

@bot.message_handler(state=Form2.other)
async def get2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global bal
        conn = sqlite3.connect("us.db", check_same_thread=False) 
        cursor = conn.cursor()
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())
        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(message.chat.id,))
        money = cursor.fetchall()
        for row in money:
            global bal
            bal = row[3]
        conn.commit()
        data['other'] = message.text
        if bal >= int(data['other']):
            await dp.send_message(message.chat.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
            choice = random.choices(nums, k=3)
            bal = bal - int(data['other'])
            if choice == ['1', '1', '1']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 1.5
                print('+',bal,'üíé')
            elif choice == ['2', '2', '2']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 2
                print('+',bal,'üíé')
            elif choice == ['3', '3', '3']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 3
                print('+',bal,'üíé')
            elif choice == ['0', '0', '0']:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
                bal = bal + int(data['other']) * 1
                print('+',bal,'üíé')
            else:
                await dp.send_message(message.chat.id, '–ë–∞—Ä–∞–±–∞–Ω:')
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[0])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[1])
                time.sleep(1)
                await dp.send_message(message.chat.id, choice[2])
                time.sleep(1)
            await dp.send_message(message.chat.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(bal) + 'üíé')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            de = """Update users SET money = ? WHERE user_id = ?"""
            w = message.chat.id
            de1 = (bal,w)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close() 
        else:
            await dp.send_message(message.chat.id, '–ù–µ—Ç—É –¥–µ–Ω—è–≥)=')
    await state.finish()

@bot.message_handler(state=Form4.other)
async def get(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        global bal
        global x
        conn = sqlite3.connect("us.db", check_same_thread=False) 
        cursor = conn.cursor()
        users = cursor.execute("SELECT * FROM `users`")
        print(users.fetchall())

        er = """select * FROM users where user_id = ?"""
        cursor.execute(er,(message.chat.id,))
        money = cursor.fetchall()
        for row in money:
            global bal
            bal = row[3]
        conn.commit()
        data['other'] = message.text
        if bal >= int(data['other']):
            await dp.send_message(message.chat.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
            time.sleep(2)
            k = [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4]
            ab = k[random.randint(1, 24)]
            if ab == 0:
                x = round(random.uniform(1.00, 1.20), 1)
            elif ab == 1:
                x = round(random.uniform(1.20, 2.00), 1)
            elif ab == 2:
                x = round(random.uniform(2.00, 5.00), 1)
            elif ab == 3:
                x = round(random.uniform(5.00, 10.00), 1)
            elif ab == 4:
                x = round(random.uniform(10.00, 100.00), 1)
            await dp.send_message(message.chat.id, f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {int(data['other'])}üíé",reply_markup=markup3)
            upload_message = await dp.send_message(chat_id=message.chat.id, text="1")
            x_now = 1
            print(x)
            timing = time.time()
            while(True):   
                if time.time() - timing > 0.25:
                    timing = time.time()
                    if x_now == x:
                        break
                    else:
                        x_now += 0.1
                        x_now = round(x_now,1)
                        await upload_message.edit_text(text=f"{x_now}")
            await dp.send_message(message.chat.id, f"–ö—Ä–∞—à!")
    await state.finish()

@bot.message_handler(state=Form3.text)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        await dp.send_message(group_id, "@" + message.from_user.username + ": " + data['text'])
        await dp.send_message(message.from_user.id, '–í—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞üòÅ')
    await state.finish()

@bot.callback_query_handler(lambda c: c.data and c.data.startswith('min'))
async def cript_min(callback_query: types.CallbackQuery):
    global bal
    global LeshaKoin_im
    global SmeshiKoin_im
    global GrafiCoin_im
    global Blin_ya_ftoroy_coin_im
    conn = sqlite3.connect("us.db", check_same_thread=False) 
    cursor = conn.cursor()
    er = """select * FROM users where user_id = ?"""
    cursor.execute(er,(callback_query.from_user.id,))
    base = cursor.fetchall()
    for row in base:
        bal = row[3]
        LeshaKoin_im = row[8]
        SmeshiKoin_im = row[9]
        GrafiCoin_im = row[10]
        Blin_ya_ftoroy_coin_im = row[11]
    conn.commit()
    cursor.close()
    await dp.answer_callback_query(callback_query.id)
    code2 = callback_query.data[-1]
    if code2.isdigit():
        code2 = int(code2)
    if code2 == 1:
        if bal >= LeshaKoin:
            LeshaKoin_im = LeshaKoin_im + 1
            bal = round(bal - LeshaKoin)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(LeshaKoin)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set LeshaKoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (LeshaKoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 2:
        if bal >= SmeshiKoin:
            SmeshiKoin_im = SmeshiKoin_im + 1
            bal = round(bal - SmeshiKoin)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(SmeshiKoin)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set SmeshiKoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (SmeshiKoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 3:
        if bal >= GrafiCoin:
            GrafiCoin_im = GrafiCoin_im + 1
            bal = round(bal - GrafiCoin)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(GrafiCoin)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set GrafiCoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (GrafiCoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')
    if code2 == 4:
        if bal >= Blin_ya_ftoroy_coin:
            Blin_ya_ftoroy_coin_im = Blin_ya_ftoroy_coin_im + 1
            bal = round(bal - Blin_ya_ftoroy_coin)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {round(Blin_ya_ftoroy_coin)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set B_YA_V_Coin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (Blin_ya_ftoroy_coin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤‚ùå')

@bot.callback_query_handler(lambda c: c.data and c.data.startswith('pls'))
async def cript_pls(callback_query: types.CallbackQuery):
    global bal
    global LeshaKoin_im
    global SmeshiKoin_im
    global GrafiCoin_im
    global Blin_ya_ftoroy_coin_im
    conn = sqlite3.connect("us.db", check_same_thread=False) 
    cursor = conn.cursor()
    er = """select * FROM users where user_id = ?"""
    cursor.execute(er,(callback_query.from_user.id,))
    base = cursor.fetchall()
    for row in base:
        bal = row[3]
        LeshaKoin_im = row[8]
        SmeshiKoin_im = row[9]
        GrafiCoin_im = row[10]
        Blin_ya_ftoroy_coin_im = row[11]
    conn.commit()
    cursor.close()
    await dp.answer_callback_query(callback_query.id)
    code2 = callback_query.data[-1]
    if code2.isdigit():
        code2 = int(code2)
    if code2 == 1:
        if LeshaKoin_im >= 1:
            LeshaKoin_im = LeshaKoin_im - 1
            LeshaKoin_pls = LeshaKoin - LeshaKoin/100*10
            bal = round(bal + LeshaKoin_pls)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(LeshaKoin_pls)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set LeshaKoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (LeshaKoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 3:
        if GrafiCoin_im >= 1:
            GrafiCoin_im = GrafiCoin_im - 1
            GrafiCoin_pls = GrafiCoin - GrafiCoin/100*10
            bal = round(bal + GrafiCoin_pls)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(GrafiCoin_pls)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set GrafiCoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (GrafiCoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 2:
        if SmeshiKoin_im >= 1:
            SmeshiKoin_im = SmeshiKoin_im - 1
            SmeshiKoin_pls = SmeshiKoin - SmeshiKoin/100*10
            bal = round(bal + SmeshiKoin_pls)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(SmeshiKoin_pls)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set SmeshiKoin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (SmeshiKoin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')
    if code2 == 4:
        if Blin_ya_ftoroy_coin_im >= 1:
            Blin_ya_ftoroy_coin_im = Blin_ya_ftoroy_coin_im - 1
            Blin_ya_ftoroy_coin_pls = Blin_ya_ftoroy_coin - Blin_ya_ftoroy_coin/100*10
            bal = round(bal + Blin_ya_ftoroy_coin_pls)
            await dp.send_message(callback_query.from_user.id, f'–£—Å–ø–µ—à–Ω–æ‚úÖ. –ü–æ–ª—É—á–µ–Ω–æ {round(Blin_ya_ftoroy_coin_pls)}')
            conn = sqlite3.connect("us.db", check_same_thread=False)
            cursor = conn.cursor()
            sql_update_query = """Update users set B_YA_V_Coin = ? where user_id = ?"""
            de = """Update users SET money = ? WHERE user_id = ?"""
            data = (Blin_ya_ftoroy_coin_im, callback_query.from_user.id,)
            w = callback_query.from_user.id
            de1 = (bal,w)
            cursor.execute(sql_update_query, data)
            cursor.execute(de, de1)
            conn.commit()
            cursor.close()
        else:
            await dp.send_message(callback_query.from_user.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç—ã‚ùå')

if __name__ == '__main__':
    executor.start_polling(bot,skip_updates=True)
