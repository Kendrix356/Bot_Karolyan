from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher, FSMContext

async def –ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å(message: types.Message):
    chat_id = message.from_user.id
    for i in range(len(ids_admines)): 
        if chat_id == ids_admines[i]:
            await dp.send_message(chat_id,'–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
            await dp.send_message(group_id, "@" + message.from_user.username + ": " + "–í–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.")
            item1_admin_panel = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞", callback_data='admin_btn1')
            item2_admin_panel = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–æ—Ç–∞", callback_data='admin_btn2')
            item3_admin_panel = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞", callback_data='admin_btn3')
            kb_admin_panel = InlineKeyboardMarkup(row_width=2).add(item1_admin_panel, item2_admin_panel, item3_admin_panel)
            await dp.send_message(chat_id,'–í—ã–±–∏—Ä–∞–π', reply_markup=kb_admin_panel)
        else: await dp.send_message(chat_id, "–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°!")
            
async def –ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å_–∏–Ω–ª–∞–π–Ω(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    if code == 1: await Form_id_add.id.set()
    if code == 2: await Form_id_delete.id.set()
    if code == 3: await Form_send_mes.id.set()
    await dp.send_message(chat_id,'–ù–∞–ø–∏—à–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

async def –î–æ–±–∞–≤–ª–µ–Ω–∏–µ_–Ω–æ–≤–æ–≥–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    async with state.proxy() as data:
        data['id'] = message.text
        ids_users.append(data['id'])
        await dp.send_message(chat_id, "–û–∫.")

async def –£–¥–∞–ª–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    async with state.proxy() as data:
        data['id'] = message.text
        try:
            ids_users.remove(data['id'])
            await dp.send_message(chat_id, "–û–∫.")
        except: await dp.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")

async def –û—Ç–ø—Ä–∞–≤–∫–∞_—Å–æ–æ–±—â–µ–Ω–∏—è1(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    async with state.proxy() as data:
        data['id'] = message.text
        await Form_send_mes.mes.set()
        await dp.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def –û—Ç–ø—Ä–∞–≤–∫–∞_—Å–æ–æ–±—â–µ–Ω–∏—è2(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    async with state.proxy() as data:
        data['mes'] = message.text
        try: await dp.send_message(data['id'], '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n<i>' + data['mes'] + '</i> - –æ—Ç –ê–¥–º–∏–Ω–∞')
        except: await dp.send_message(chat_id, "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ id –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.finish()

def reg_handlers_admin_panel(bot: Dispatcher):
    bot.register_message_handler(–ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å,commands=['admin_panel'])
    bot.register_callback_query_handler(–ê–¥–º–∏–Ω_–ø–∞–Ω–µ–ª—å_–∏–Ω–ª–∞–π–Ω,lambda c: c.data and c.data.startswith('admin_btn'))
    bot.register_message_handler(–î–æ–±–∞–≤–ª–µ–Ω–∏–µ_–Ω–æ–≤–æ–≥–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,state=Form_id_add.id)
    bot.register_message_handler(–£–¥–∞–ª–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,state=Form_id_delete.id)
    bot.register_message_handler(–û—Ç–ø—Ä–∞–≤–∫–∞_—Å–æ–æ–±—â–µ–Ω–∏—è1,state=Form_send_mes.id)
    bot.register_message_handler(–û—Ç–ø—Ä–∞–≤–∫–∞_—Å–æ–æ–±—â–µ–Ω–∏—è2,state=Form_send_mes.mes)
