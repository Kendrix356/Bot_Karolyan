from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import asyncio
from aiogram import types
from aiogram.dispatcher import Dispatcher

work_data = {}

async def –†–∞–±–æ—Ç—ã(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    await callback_query.message.delete()
    
    if code == 1:
        right_answer = 0
        msg1 = await dp.send_message(chat_id, f"–¢—ã –≤—ã–±—Ä–∞–ª —Ä–∞–±–æ—Ç—É - <i>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</i>")
        await asyncio.sleep(1)
        msg2 = await dp.send_message(chat_id, "–ï–µ –∑–∞–¥–∞—á–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å –±—ãc—Ç—Ä–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.")
        await asyncio.sleep(3)
        msg3 = await dp.send_message(chat_id, "–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞, –≥–æ—Ç–æ–≤—å—Å—è!")
        await asyncio.sleep(5)
        await msg1.delete()
        await msg2.delete()
        await msg3.delete()
        await dp.send_message(chat_id, "–ù–∞—á–∏–Ω–∞–µ–º!",reply_markup=kb_stop_work)
        work_data[chat_id] = {
                    'working': 1,
                    'answer': 0,
                    'right_answer': 0,
                    'situaded': 0
                    }
        for i  in range(10):
            working = work_data[chat_id]['working']
            work_data[chat_id]['answer'] = 0
            if i == 0: work_data[chat_id]['right_answer'] = 0
            if working == 1:
                situaded, correct_word, markup = generate_translate()
                translate_msg = await dp.send_message(chat_id, f"–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ '{words_english[correct_word]}' ", reply_markup=markup)
                work_data[chat_id]['situaded'], work_data[chat_id]['translate_msg'] = situaded, translate_msg
                await asyncio.sleep(5)
                answer = work_data[chat_id]['answer']
                if answer == 0:
                    answer = 'Time_error'
                    await translate_msg.delete()
                    time_error = await dp.send_message(chat_id, "–í—Ä–µ–º—è –≤—ã—à–ª–æ)=")
                    await asyncio.sleep(1)
                    await time_error.delete()
            if i == 9:
                right_answer = work_data[chat_id]['right_answer']
                await dp.send_message(chat_id, f"–í–æ—Ç –∏ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏) –£ —Ç–µ–±—è {right_answer} –∏–∑ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö. –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {right_answer*10}üíé",reply_markup=kb_income)
                send_data(chat_id, 'balance', get_data(chat_id, 'balance') + right_answer*10)
                del work_data[chat_id] 
    if code == 2:
        await dp.send_message(chat_id, "–ü–æ–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Ç–∞–∫—Å–∏—Å—Ç–æ–º –Ω–µ—Ç)=")
    if code == 3:
        await dp.send_message(chat_id, "–ü–æ–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å–µ—Ç–µ–≤—ã–º –∞–¥–º–∏–Ω–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ—Ç)=")

async def –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    situaded = work_data[chat_id]['situaded']
    work_data[chat_id]['answer'] = 1
    await callback_query.message.delete()

    if code == situaded :
        right = await dp.send_message(chat_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ(+10üíé)")
        await asyncio.sleep(1)
        await right.delete()
        work_data[chat_id]['right_answer'] += 1
    else:
        error = await dp.send_message(chat_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        await asyncio.sleep(1)
        await error.delete()    

def reg_handlers_school(bot: Dispatcher):
    bot.register_callback_query_handler(–†–∞–±–æ—Ç—ã,lambda c: c.data and c.data.startswith('job_'))
    bot.register_callback_query_handler(–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫,lambda c: c.data and c.data.startswith('translate_'))



