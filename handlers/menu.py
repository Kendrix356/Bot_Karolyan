from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import asyncio
import random
import time
from threading import Thread
import sqlite3
import aiogram.utils.markdown as fmt
import aiogram.utils.markdown as md
from aiogram import Bot, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup

#@bot.message_handler()
async def –ì–ª–∞–≤–Ω–æ–µ_–º–µ–Ω—é(message, state: FSMContext):
    #–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    for i in range(len(ids_users)): 
        if message.from_user.id == ids_users[i] and get_data(message.from_user.id,'status') != 3:
            
            if message.text == "–ó–∞—Ä–∞–±–æ—Ç–∞–∫üí∞":
                await dp.send_message(message.from_user.id, '–ï—Å—Ç—å –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞—Ä–æ–±–æ—Ç–∫–∞:)',reply_markup=kb_income)
            
            elif message.text == "–ö–∞–∑–∏–Ω–æü§ë":
                await dp.send_message(message.from_user.id, '–°—Ç–∞–≤—å —Å—Ç–∞–≤–∫—É!\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–æ—Ç–º–µ–Ω–∞"', reply_markup=types.ReplyKeyboardRemove())
                await Form_cas.stavka.set()

            elif message.text == "–ö–∞—Ä—Ç–∞üÉè":
                photo = open('map.png', 'rb')
                await dp.send_photo(message.chat.id, photo=photo, caption="–í–æ—Ç –∫–∞—Ä—Ç–∞)")
                item1 = types.InlineKeyboardButton("–î—Ä—É–≥–∞—è –æ–±–ª–∞—Ç—å", callback_data='map_go1')
                item2 = types.InlineKeyboardButton("–°—Ç–æ–ª–∏—Ü–∞", callback_data='go_dif4')
                item3 = types.InlineKeyboardButton("–ì–æ—Ä–æ–¥(–∂–∏–ª—å–µ)", callback_data='map_go3')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3)
                mes = await dp.send_message(message.from_user.id, '–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ <i>' + str(get_data(message.from_user.id, 'location')) + '</i>'+ '\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É)', reply_markup=markup)

            elif message.text == "–®–∫–æ–ª–∞üè´":
                item1 = InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='keyboaord_school1')
                item2 = InlineKeyboardButton("–û—Ç–≤–µ—Ç—ã –Ω–∞ –º—É–∑—ã–∫—É", callback_data='keyboaord_school2')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π —á—Ç–æ –Ω—É–∂–Ω–æ —Ç–µ–±–µ:', reply_markup=markup)

            elif message.text == "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µüôè":
                await dp.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞, –Ω–∞–∂–º–∏ —Å—é–¥–∞ -> https://clck.ru/32WjF3')    

            elif message.text == "–ú–∞–≥–∞–∑–∏–Ωüè™":
                location = get_data(message.from_user.id, 'location')
                if location == '–°—Ç–æ–ª–∏—Ü–∞':
                    item1 = InlineKeyboardButton("–ú–∞—à–∏–Ω—ã", callback_data='mag_4')
                    item2 = InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞", callback_data='mag_5')
                    markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
                elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': 
                    pass
                else:
                    item1 = InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å", callback_data='mag_1')
                    item2 = InlineKeyboardButton("–ë—É—Å—Ç–µ—Ä—ã", callback_data='mag_2')
                    item3 = InlineKeyboardButton("–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data='mag_3')
                    markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3)
                mes = await dp.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',reply_markup=markup)

            elif message.text == "–ú–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—èüë∂":
                item1 = InlineKeyboardButton("–ö–∞–∫ –∑–æ–≤—É—Ç?üßê", callback_data='keyboaord2_button1')
                item2 = InlineKeyboardButton("–°–∫–æ–ª–∫—å–æ –¥–µ–Ω–µ–≥?üí∏", callback_data='keyboaord2_button2')
                item3 = InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(–∞) –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤?üé´", callback_data='keyboaord2_button3')
                item4 = KeyboardButton("–ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—åüöó", callback_data='keyboaord2_button4')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4)
                await dp.send_message(message.from_user.id, '–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ(=', reply_markup=markup)

            elif message.text == "–¢–æ–øüòé":
                user = []
                balance = []
                conn = sqlite3.connect("us.db", check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute("""select balance FROM users""")
                moneys = cursor.fetchall()
                moneys.sort(reverse=True)
                conn.commit()
                cursor.close()

                for i in range(3):
                    conn = sqlite3.connect("us.db", check_same_thread=False)
                    cursor = conn.cursor()
                    try: cursor.execute("""select * FROM users where balance = ?""", moneys[i])
                    except:
                        await dp.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ¬Ø\_(„ÉÑ)_/¬Ø')
                        break
                    data = cursor.fetchall()
                    for row in data:
                        user.append(row[2])
                        balance.append(row[3])
                    conn.commit()
                    cursor.close()

                await dp.send_message(message.from_user.id,
                fmt.text(
                fmt.text("üíµ–°–∞–º—ã–µ —Å–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ"),
                fmt.text("1 - ",user[0],"(",balance[0],")"),
                fmt.text("2 - ",user[1],"(",balance[1],")"),
                fmt.text("3 - ",user[2],"(",balance[2],")"),
                sep="\n"
                ), parse_mode="HTML"
                )

            elif message.text == "–ó–∞—è–≤–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Éüóé":
                await dp.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤ü§î.',reply_markup=types.ReplyKeyboardRemove())
                await Form_moder.moder.set()
            
            elif message.text == "–†–∞–±–æ—Ç—ãüíº":
                item1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data='job_1')
                item2 = types.InlineKeyboardButton("–¢–∞–∫—Å–∏—Å—Ç", callback_data='job_2')
                item3 = types.InlineKeyboardButton("–°–µ—Ç–µ–≤–æ–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data='job_3')
                markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3)                                                                                                                                                                                                                                                                                                                 
                works_mes = await dp.send_message(message.from_user.id, '–ö–µ–º –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?', reply_markup=markup)
                async with state.proxy() as data:
                    data['works_mes'] = works_mes
                    data['working'] = 1
            elif message.text == "–ë–∏–∑–Ω–µ—Å":
                have_buizness = get_data(message.from_user.id, 'buizness')
                if have_buizness == 0:
                    item1 = types.InlineKeyboardButton("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∏–∑–Ω–µ—Å?", callback_data='pod_2')
                    markup = InlineKeyboardMarkup(row_width=2).add(item1)
                    await dp.send_message(message.from_user.id, "–¢—ã –ø–æ–∫–∞ –Ω–µ –∏–º–µ—à—å –±–∏–∑–Ω–µ—Å–∞, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å, —Ç–µ–±–µ –≤ –º–∞–≥–∞–∑–∏–Ω",reply_markup=markup)
                else:
                    if buizness[have_buizness] == '–ê–≤—Ç–æ–º–∞—Ç —Å –µ–¥–æ–π': 
                        photo_b = open('buizness1.jpg', 'rb')
                    elif buizness[have_buizness] == '–ö–æ—Ñ–µ–π–Ω—è': 
                        photo_b = open('buizness2.jpg', 'rb')
                    item1 = types.InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data='pod_1')
                    item2 = types.InlineKeyboardButton("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∏–∑–Ω–µ—Å", callback_data='pod_2')
                    markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)
                    await dp.send_photo(message.from_user.id, photo=photo_b, caption=f"–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å <b>{buizness[have_buizness]}</b>", reply_markup=markup)
            elif message.text == "–ü—Ä–æ–º–æ–∫–æ–¥—ãüéÇ":
                await dp.send_message(message.from_user.id,'–ù–∞–ø–∏—à–∏ –ø—Ä–æ–º–æ–∫–æ_–¥–∏–∫')
                await Form_promo.promo.set()

            elif message.text == "–ó–∞–≥—Å":
                await dp.send_message(message.from_user.id, '–¢—ã –µ—â–µ –Ω–µ –¥–æ—Ä–æ—Å!(:')

            elif '–ù–∞—Ö' in message.text or '–Ω–∞—Ö' in message.text:
                await dp.send_message(message.from_user.id, '—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–µ–±—è')
            elif '–ë–∞—Ä–∞–Ω–∏–Ω–∞' in message.text or '–±–∞—Ä–∞–Ω–∏–Ω–∞' in message.text:
                await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
            elif '–®–ª—é—Ö' in message.text or '—à–ª—é—Ö' in message.text:
                await dp.send_message(message.from_user.id, '—á–µ–ª..')
            elif '–¢—É–ø–∞—è' in message.text or '—Ç—É–ø–∞—è' in message.text:
                await dp.send_message(message.from_user.id, '–∂–∞–ª–∫–æ —Ç–µ–±—è')
            elif '–ë–ª—è–¥—å' in message.text or '–±–ª—è–¥—å' in message.text:
                await dp.send_message(message.from_user.id, '–ª–∞–¥–Ω–æ.')
            elif '–ï–±–∞–Ω—É—Ç–∞—è' in message.text or '–µ–±–∞–Ω—É—Ç–∞—è' in message.text:
                await dp.send_message(message.from_user.id, '—Å–∞–º–∞ —Ç–∞–∫–∞—è')
            elif '–ú—É–¥–∏–ª–∞' in message.text or '–º—É–¥–∏–ª–∞' in message.text:
                await dp.send_message(message.from_user.id, '–∫—Ç–æ –±—ã –≥–æ–≤–æ—Ä–∏–ª')
            elif '–ü–∏–∑–¥' in message.text or '–ø–∏–∑–¥' in message.text:
                await dp.send_message(message.from_user.id, '—Ç–≤–æ—è')
            elif '–°—É–∫–∞' in message.text or '—Å—É–∫–∞' in message.text:
                await dp.send_message(message.from_user.id, '—Ç—ã.')

            elif '–õ—é–±–ª—é' in message.text or '–ª—é–±–ª—é' in message.text:
                await dp.send_message(message.from_user.id, '–Ø —Ç–µ–±—è —Ç–æ–∂–µ‚ù§')
                if get_data(message.from_user.id, 'love') == 1:
                    await dp.send_message(message.from_user.id, '–î–µ—Ä–∂–∏ –¥–µ–Ω–µ–∂–∫—É')
                    await dp.send_message(message.from_user.id, '(–ø–æ–ª—É—á–µ–Ω–æ 100üíé)')
                    send_data(message.from_user.id, 'love', 0)
                    send_data(message.from_user.id, 'balance', get_data(message.from_user.id, 'balance')+100)

            elif message.text == "–ù–∞–∑–∞–¥":
                location = get_data(message.from_user.id, 'location')
                if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu_st)
                elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu_gr)
                else: await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu)

            elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
                async with state.proxy() as data:
                    data['working'] = 0
                location = get_data(message.from_user.id, 'location')
                if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu_st)
                elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu_gr)
                else: await dp.send_message(message.from_user.id, "–û–∫", reply_markup=kb_menu)    

            else:
                await dp.send_message(message.from_user.id, '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –±–æ—Ç–æ–≤–æ–¥—Å–∫–∏–π, —è –Ω–µ –ø–æ–Ω—è–ª–∞üò¢')

def reg_handlers_menu(bot: Dispatcher):
    bot.register_message_handler(–ì–ª–∞–≤–Ω–æ–µ_–º–µ–Ω—é)
