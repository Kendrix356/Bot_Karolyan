from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import aiogram.utils.markdown as md
from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher

async def –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ(message: types.Message):
    chat_id = message.from_user.id
    for i in range(len(ids_users)): 
        if chat_id == ids_users[i]:
            try:
                if get_data(chat_id,'register') == 0: await backmarkup(chat_id,"–ü—Ä–∏–≤–µ—Ç!")
            except:
                reg(chat_id)
                await dp.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç. –Ø - –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã 8-–æ–≥–æ '–ë' –∫–ª–∞—Å—Å–∞. –Ø –±—É–¥—É –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ. –ù–æ —ç—Ç–æ –Ω–µ –ø—Ä–∞–≤–¥–∞üòÅ")
                await dp.send_message(chat_id,"–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–µ —Ä–µ–∞–ª—å–Ω–æ –∏–º—è, –∞ —Ç–æ —à—Ç—Ä–∞—Ñ 150(=")
                send_data(chat_id, 'register', 0)
                await Form_name.name.set()
                
async def –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    async with state.proxy() as data:
        data['name'] = message.text
        send_data(chat_id, 'name', remove_char(md.bold(data['name'])))
    await state.finish()
    await backmarkup(chat_id,"–°–ø–∞—Å–∏–±–∫–∏)")

def reg_handlers_start(bot: Dispatcher):
    bot.register_message_handler(–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ,commands=['start'])
    bot.register_message_handler(–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è,state=Form_name.name)