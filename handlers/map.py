from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import asyncio
import random
from aiogram import types
from aiogram.types import InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext, Dispatcher

async def –ü–æ–µ—Ö–∞—Ç—å_–≤_–æ–±–ª–∞—Å—Ç—å(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    await callback_query.message.delete()

    if code == 1:
        item1 = types.InlineKeyboardButton("7–ê", callback_data='go_dif0')
        item2 = types.InlineKeyboardButton("7–ë", callback_data='go_dif1')
        item3 = types.InlineKeyboardButton("7–í", callback_data='go_dif2')
        item4 = types.InlineKeyboardButton("7–ì", callback_data='go_dif3')
        markup = InlineKeyboardMarkup(row_width=2).add(item1, item2, item3, item4)
        await dp.send_message(chat_id, "–í –∫–∞–∫—É—é –æ–±–ª–∞—Ç—å?", reply_markup=markup)
    elif code == 3:
        await dp.send_message(chat_id, "–ü—É—Ç—å —Ç—É–¥–∞ –∑–∞–≤–∞–ª–µ–Ω –∫–∞–º–Ω—è–º–∏) –°—Ç—Ä–æ–∏—Ç–µ–ª–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —ç—Ç–∏–º.")


async def –ï—Ö–∞—Ç—å_–∏–ª–∏_–Ω–µ—Ç(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    await callback_query.message.delete()

    item1 = types.InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏", callback_data='poex1')
    item2 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='poex2')
    markup = InlineKeyboardMarkup(row_width=2).add(item1, item2)

    k = random.uniform(1,1.5)
    pay = round(150 * k)
    kuda = code

    if get_data(chat_id, 'location') != kuda_mes[kuda]:
        if get_data(chat_id,'balance') >= pay:
            if get_data(chat_id, "buster") == 1: 
                text = '\u0336'.join(str(pay))
                pay = round(pay * 0.75)
                await dp.send_message(chat_id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ = {text} {str(pay)}üíé", reply_markup=markup)
            else: await dp.send_message(chat_id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ = {str(pay)}üíé", reply_markup=markup)
            async with state.proxy() as data:
                data['kuda'] = kuda
                data['pay'] = pay
        else:
            if get_data(chat_id, 'location') == '–°—Ç–æ–ª–∏—Ü–∞': 
                await dp.send_message(chat_id, "–¢–∞–∫ –∫–∞–∫ —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, –∞ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—Å—è –≤ —Å—Ç–æ–ª–∏—Ü–µ, –≥–¥–µ –Ω–µ–ª—å–∑—è –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –ø–æ–µ–∑–¥–∫–∞ –¥–ª—è —Ç–µ–±–µ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–∞")
                await dp.send_message(chat_id, "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ = 0üíé", reply_markup=markup)
                async with state.proxy() as data:
                    data['kuda'] = kuda
                    data['pay'] = 0
            else: await dp.send_message(chat_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥)=")
    else:
        await dp.send_message(chat_id, "–ó–∞—á–µ–º —Ç–µ–±–µ –µ—Ö–∞—Ç—å —Ç—É–¥–∞, –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Ç–∞–º???")

async def –ï–¥–∏–º(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    async with state.proxy() as data:
        kuda = data['kuda']
        pay = data['pay']
    await state.finish()

    await callback_query.message.delete()

    if code == 1:
        wait_sec = random.randint(10,30)
        wait = await dp.send_message(chat_id, f"–ß–µ—Ä–µ–∑ {wait_sec} —Å–µ–∫—É–Ω–¥ —Ç—ã –ø—Ä–∏–µ–¥–µ—à—å(=",reply_markup=types.ReplyKeyboardRemove())
        status_pred = get_data(chat_id, 'status')
        send_data(chat_id, 'status', 3)
        await asyncio.sleep(wait_sec)
        await wait.delete()
        send_data(chat_id, 'balance', get_data(chat_id,'balance')-pay)
        send_data(chat_id, 'location', kuda_mes[kuda])
        send_data(chat_id, 'status', status_pred)
        await backmarkup(chat_id, f"–¢—ã –ø—Ä–∏–µ—Ö–∞–ª) -{pay}üíé")
    elif code == 2:
        await dp.send_message(chat_id, "–û–∫)")

def reg_handlers_map(bot: Dispatcher):
    bot.register_callback_query_handler(–ü–æ–µ—Ö–∞—Ç—å_–≤_–æ–±–ª–∞—Å—Ç—å,lambda c: c.data and c.data.startswith('map_go'))
    bot.register_callback_query_handler(–ï—Ö–∞—Ç—å_–∏–ª–∏_–Ω–µ—Ç,lambda c: c.data and c.data.startswith('go_dif'))
    bot.register_callback_query_handler(–ï–¥–∏–º,lambda c: c.data and c.data.startswith('poex'))