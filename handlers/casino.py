from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import asyncio
import random
from aiogram import types
from aiogram.types import InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext, Dispatcher

game_data = {}

async def –°—Ç–∞–≤–∫–∞(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    async with state.proxy() as data:
        data['stavka'] = message.text
        if data['stavka'].isdigit():
            if get_data(chat_id, 'balance') >= int(data['stavka']):
                cansel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cas_4')
                if get_data(chat_id, 'location') != '–°—Ç–æ–ª–∏—Ü–∞':
                    item1 = types.InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Ç777", callback_data='cas_1')
                    item2 = types.InlineKeyboardButton("–ú–æ–Ω–µ—Ç–∫–∞", callback_data='cas_2')
                    markup = InlineKeyboardMarkup(row_width=1).add(item1, item2, cansel)
                else:
                    item1 = types.InlineKeyboardButton("–ë–∞—à–Ω—è", callback_data='cas_3')
                    markup = InlineKeyboardMarkup(row_width=1).add(item1, cansel)
                await dp.send_message(chat_id, '–°—Ç–∞–≤–∫–∞: '+ data['stavka'] + '\n–í–æ —á—Ç–æ –∏–≥—Ä–∞—Ç—å –±—É–¥–µ–º?',reply_markup=markup)
                game_data[chat_id] = {
                    'stavka': int(data['stavka']),
                    'game_board': 0,
                    'current_level': 0
                    }
                await state.finish()
            else:
                await backmarkup(chat_id, "–Ω–µ—Ç—É –¥–µ–Ω—è–≥)=")
                await state.finish()
        elif data['stavka'] == "–æ—Ç–º–µ–Ω–∞" or data['stavka'] == "–û—Ç–º–µ–Ω–∞":
            await backmarkup(chat_id, "–æ–∫–µ–π")
            await state.finish()
        else:
            await dp.send_message(chat_id, "–≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞")
            await Form_cas.stavka.set()

async def –ò–≥—Ä–∞_–∫–∞–∑–∏–Ω–æ(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    await callback_query.message.delete()
    bal = get_data(chat_id,'balance')
    stavka = int(game_data[chat_id]['stavka'])
    send_data(chat_id, "status",3)

    if code == 1:
        await dp.send_message(chat_id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
        choice = random.choices(nums, k=3)
        if choice == ['1', '1', '1'] or \
           choice == ['2', '2', '2'] or \
           choice == ['3', '3', '3']: bal += stavka * 5
        mes = await dp.send_message(chat_id, '–ë–∞—Ä–∞–±–∞–Ω:')
        choiceF = custom_sort(choice)
        await asyncio.sleep(1)
        await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choiceF[0])
        await asyncio.sleep(1)
        await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choiceF[0] + ' '+ choiceF[1])
        await asyncio.sleep(1)
        await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choiceF[0] + ' ' + choiceF[1] + ' ' + choiceF[2])
    elif code == 2:
        await dp.send_message(chat_id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ\n–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞ - —Ä–µ—à–∫–∞')
        await asyncio.sleep(1)
        random_value = random.randrange(1,100)
        if random_value <= 45: 
            await dp.send_message(chat_id, '–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞\n–ü–æ–±–µ–¥–∞')
            bal += 2*stavka
            await asyncio.sleep(1)
        else:
            await dp.send_message(chat_id, '–í—ã–ø–∞–ª –æ—Ä–µ–ª\n–ü—Ä–æ–∏–≥—Ä—ã—à')
            await asyncio.sleep(1)
    elif code == 3:
        await dp.send_message(chat_id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
        game_data[chat_id]['game_board'] = create_game_board()
        game_data[chat_id]['current_level'] = 0
        send_data(chat_id, "balance",bal-stavka)
        await show_game_board(chat_id)
    if code == 4: 
        await backmarkup(chat_id, "–æ–∫–µ–π") 
        send_data(chat_id, "status",1)
    elif code != 3:
        await backmarkup(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {str(bal-stavka)}üíé")
        send_data(chat_id, "balance",bal-stavka)
        send_data(chat_id, "status",1)
        del game_data[chat_id]

async def –ë–∞—à–Ω—è(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    game_board = game_data[chat_id]['game_board']
    current_level = game_data[chat_id]['current_level']
    bal = get_data(callback_query.from_user.id,'balance')

    if code != 4:
        game_data[chat_id]['current_level'] += 1
        if game_board[current_level][code-1] == "üí£":
            await show_game_board(chat_id,1)
            await dp.send_message(chat_id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
            await asyncio.sleep(2)
            await callback_query.message.delete()
            await backmarkup(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {str(bal)}üíé")
            send_data(chat_id, "status",1)
            del game_data[chat_id]
        else:
            if current_level == 4:
                await show_game_board(chat_id,1)
                plus = game_data[chat_id]['stavka']*(current_level+1)
                await dp.send_message(chat_id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Å–ª–æ–∏. –í—ã –ø–æ–±–µ–¥–∏–ª–∏.(+{plus})')
                send_data(chat_id,"balance",bal+plus)
                await asyncio.sleep(2)
                await callback_query.message.delete()
                await backmarkup(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {str(bal+plus)}üíé")
                send_data(chat_id, "status",1)
                del game_data[chat_id]
            else:
                await show_game_board(chat_id)
    elif game_data[chat_id]['current_level'] != 0:
        plus = game_data[chat_id]['stavka']*current_level
        await dp.send_message(chat_id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏.(+{plus})')
        send_data(chat_id,"balance",bal+plus)
        await asyncio.sleep(2)
        await callback_query.message.delete()
        await backmarkup(chat_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å {str(bal+plus)}üíé")
        send_data(chat_id, "status",1)
        del game_data[chat_id]
    else:
        await dp.send_message(chat_id, '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å, –Ω–µ –ø—Ä–æ—à–µ–≤ –Ω–∏ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å!')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
async def show_game_board(chat_id, last = 0):
    game_board = game_data[chat_id]['game_board']
    current_level = game_data[chat_id]['current_level']
    board_message = display_game_board(game_board, current_level)

    item1 = types.InlineKeyboardButton("1", callback_data='bash_1')
    item2 = types.InlineKeyboardButton("2", callback_data='bash_2')
    item3 = types.InlineKeyboardButton("3", callback_data='bash_3')
    item4 = types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data='bash_4')
    keyboard = InlineKeyboardMarkup(row_width=3).add(item1, item2, item3, item4)

    if current_level != 0:
            if last == 0:
                await dp.edit_message_text(chat_id=chat_id, message_id=game_data[chat_id]['message_id'],
                                            text=board_message, reply_markup=keyboard)
            else: await dp.edit_message_text(chat_id=chat_id, message_id=game_data[chat_id]['message_id'],
                                            text=board_message, reply_markup=None)
    else:
        ms = await dp.send_message(chat_id=chat_id, text=board_message, reply_markup=keyboard)
        game_data[chat_id]['message_id'] = ms["message_id"]

def reg_handlers_casino(bot: Dispatcher):
    bot.register_message_handler(–°—Ç–∞–≤–∫–∞,state=Form_cas.stavka)
    bot.register_callback_query_handler(–ò–≥—Ä–∞_–∫–∞–∑–∏–Ω–æ,lambda c: c.data and c.data.startswith('cas_'))
    bot.register_callback_query_handler(–ë–∞—à–Ω—è,lambda c: c.data and c.data.startswith('bash_'))