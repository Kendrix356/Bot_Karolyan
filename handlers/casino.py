from constants import *
from objects import *
from Function import *
from fsm import *

from create_bot import dp,bot

import asyncio
import random
import time
from threading import Thread
import sqlite3
import aiogram.utils.markdown as fmt
import aiogram.utils.markdown as md
from aiogram import Bot, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup

async def –°—Ç–∞–≤–∫–∞(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['stavka'] = message.text
        if data['stavka'].isdigit():
            if get_data(message.chat.id, 'balance') >= int(data['stavka']):
                item3 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cas_4')
                if get_data(message.from_user.id, 'location') != '–°—Ç–æ–ª–∏—Ü–∞':
                    item1 = types.InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Ç777", callback_data='cas_1')
                    item2 = types.InlineKeyboardButton("–ú–æ–Ω–µ—Ç–∫–∞", callback_data='cas_2')
                    markup = InlineKeyboardMarkup(row_width=1).add(item1, item2, item3)
                else:
                    item1 = types.InlineKeyboardButton("–ë–∞—à–Ω—è", callback_data='cas_3')
                    markup = InlineKeyboardMarkup(row_width=1).add(item1, item3)
                await dp.send_message(message.chat.id, '–°—Ç–∞–≤–∫–∞: '+ data['stavka'] + '\n–í–æ —á—Ç–æ –∏–≥—Ä–∞—Ç—å –±—É–¥–µ–º?',reply_markup=markup)
                await state.finish()
            else:
                location = get_data(message.from_user.id, 'location')
                if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(message.from_user.id, '–ù–µ—Ç—É –¥–µ–Ω—è–≥)=', reply_markup=kb_menu_st)
                elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(message.from_user.id, '–ù–µ—Ç—É –¥–µ–Ω—è–≥)=', reply_markup=kb_menu_gr)
                else: await dp.send_message(message.from_user.id, '–ù–µ—Ç—É –¥–µ–Ω—è–≥)=', reply_markup=kb_menu)
                await state.finish()
        elif data['stavka'] == "–æ—Ç–º–µ–Ω–∞" or data['stavka'] == "–û—Ç–º–µ–Ω–∞":
            location = get_data(message.from_user.id, 'location')
            if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(message.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu_st)
            elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(message.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu_gr)
            else: await dp.send_message(message.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu)
            await state.finish()
        else:
            await dp.send_message(message.chat.id, "–≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞")
            await Form_cas.stavka.set()

async def –ò–≥—Ä–∞_–∫–∞–∑–∏–Ω–æ(callback_query: types.CallbackQuery, state: FSMContext):
    await dp.answer_callback_query(callback_query.id)
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)

    await callback_query.message.delete()
    bal = get_data(callback_query.from_user.id,'balance')

    async with state.proxy() as data:
        if code == 1:
            await dp.send_message(callback_query.from_user.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
            choice = random.choices(nums, k=3)
            bal = bal - int(data['stavka'])
            if choice == ['1', '1', '1']:
                bal += int(data['stavka']) * 2
            elif choice == ['2', '2', '2']:
                bal += int(data['stavka']) * 3
            elif choice == ['3', '3', '3']:
                bal += int(data['stavka']) * 5
            elif choice == ['0', '0', '0']:
                bal += int(data['stavka']) * 1
            mes = await dp.send_message(callback_query.from_user.id, '–ë–∞—Ä–∞–±–∞–Ω:')
            time.sleep(1)
            await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choice[0])
            time.sleep(1)
            await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choice[0] + ' '+ choice[1])
            time.sleep(1)
            await mes.edit_text('–ë–∞—Ä–∞–±–∞–Ω: ' + choice[0] + ' ' + choice[1] + ' ' + choice[2])
        elif code == 2:
            await dp.send_message(callback_query.from_user.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ\n–í–∞—à–∞ —Å—Ç–æ—Ä–æ–Ω–∞ - —Ä–µ—à–∫–∞')
            time.sleep(1)
            random_value = random.choice([True, False])
            if random_value == True: 
                await dp.send_message(callback_query.from_user.id, '–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞\n–ü–æ–±–µ–¥–∞')
                bal = bal + 2 * int(data['stavka'])
                time.sleep(1)
            else:
                await dp.send_message(callback_query.from_user.id, '–í—ã–ø–∞–ª –æ—Ä–µ–ª\n–ü—Ä–æ–∏–≥—Ä—ã—à')
                bal = bal - int(data['stavka'])
                time.sleep(1)
        elif code == 3:
            array = [['‚úÖ'] * 3 for _ in range(5)]
            for row in array: row[random.randint(0, 2)] = 'üí£'
            await dp.send_message(callback_query.from_user.id, '–ü–æ–µ—Ö–∞–ª–∏üçÄ')
            item1 = types.InlineKeyboardButton("1", callback_data='bash_1')
            item2 = types.InlineKeyboardButton("2", callback_data='bash_2')
            item3 = types.InlineKeyboardButton("3", callback_data='bash_3')
            markup = InlineKeyboardMarkup(row_width=3).add(item1, item2, item3)
            mes_bash = await dp.send_message(callback_query.from_user.id,
                fmt.text(
                fmt.text("–ë–∞—à–Ω—è:"),
                fmt.text("5.0x - ",array[4]),
                fmt.text("4.0x - ",array[3]),
                fmt.text("3.0x - ",array[2]),
                fmt.text("2.0x - ",array[1]),
                fmt.text("1.5x - ",array[0]),
                sep="\n"
                ), parse_mode="HTML", reply_markup=markup
                )
            



        if code == 4:
            location = get_data(callback_query.from_user.id, 'location')
            if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(callback_query.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu_st)
            elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(callback_query.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu_gr)
            else: await dp.send_message(callback_query.from_user.id, "–û–∫–µ–π", reply_markup=kb_menu)
        else:
            location = get_data(callback_query.from_user.id, 'location')
            if location == '–°—Ç–æ–ª–∏—Ü–∞': await dp.send_message(callback_query.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(bal) + 'üíé', reply_markup=kb_menu_st)
            elif location == '–í–µ—Ä—Ö–Ω–∏–π –≥–æ—Ä–æ–¥' or location == '–ù–∏–∂–Ω–∏–π –≥–æ—Ä–æ–¥': await dp.send_message(callback_query.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(bal) + 'üíé', reply_markup=kb_menu_gr)
            else: await dp.send_message(callback_query.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(bal) + 'üíé', reply_markup=kb_menu)
            send_data(callback_query.from_user.id, 'balance', bal)
    await state.finish()

def reg_handlers_casino(bot: Dispatcher):
    bot.register_message_handler(–°—Ç–∞–≤–∫–∞,state=Form_cas.stavka)
    bot.register_callback_query_handler(–ò–≥—Ä–∞_–∫–∞–∑–∏–Ω–æ,lambda c: c.data and c.data.startswith('cas_'))